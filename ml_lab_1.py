# -*- coding: utf-8 -*-
"""ML_Lab_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mbm89rsffJvzD4IfPj3wz555rl6IVtdN

1. Consider the given list as [2, 7, 4, 1, 3, 6]. Write a program to count pairs of elements with
sum equal to 10.
"""

list = [2, 7, 4, 1, 3, 6]

length = len(list)
count = 0
n = 0

while n < length:
    m = n + 1
    while m < length:
        if list[n] + list[m] == 10:
            count += 1
        m += 1
    n += 1

print(count)

"""2. Write a program that takes a list of real numbers as input and returns the range (difference
between minimum and maximum) of the list. Check for list being less than 3 elements in
which case return an error message (Ex: “Range determination not possible”). Given a list
[5,3,8,1,0,4], the range is 8 (8-0).
"""

numbers = input("Enter a list of real numbers (Minimum 3 numbers) separated by space: ")
num_list = [int(num) for num in numbers.split(",")]

def get_range(lst):
    return min(lst), max(lst)

def check_size(lst):
    if len(lst) < 3:
        return False
    return True

if check_size(num_list):
    min_val, max_val = get_range(num_list)
    print("The range is", int(max_val)-int(min_val), "(", max_val, "-", min_val, ")")
else:
    print("Range determination not possible")

"""3. Write a program that accepts a square matrix A and a positive integer m as arguments and returns A^m."""

values = input("Enter the matrix values with columns separated by commas and rows separated by semicolons: ")
power = int(input("Enter power of the matrix: "))

# Split elements
A = [[int(num) for num in row.split(',')] for row in values.split(';')]

def matrix_pow(A, power):
    if power == 1:
        return A
    else:
        result = A
        for _ in range(power - 1):
            result = mult(result, A)
        return result

def mult(A, B):
    n = len(A)
    result = [[0] * n for _ in range(n)]

    for i in range(n):
        for j in range(n):
            for k in range(n):
                result[i][j] += A[i][k] * B[k][j]

    return result

result_mat = matrix_pow(A, power)

print(f"The result after raising the matrix to the power {power} is:")
for row in result_mat:
    print(row)

"""4. Write a program to count the highest occurring character & its occurrence count in an input
string. Consider only alphabets. Ex: for “hippopotamus” as input string, the maximally
occurring character is ‘p’ & occurrence count is 3.
"""

word = input("Enter a word: ")
letters = list(word)
char_count = {}

for letter in letters:
    if letter not in char_count:
        char_count[letter] = 1
    else:
        char_count[letter] += 1

def max_occ(char_count):
    max_char = max(char_count, key=char_count.get)
    return max_char, char_count[max_char]

result_char, result_count = max_occ(char_count)

print(f"The maximally occurring character is '{result_char}' & occurrence count is {result_count}.")